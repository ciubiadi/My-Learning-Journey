{"ast":null,"code":"var _jsxFileName = \"/Users/aciubucciu/Desktop/Personal/Learning/My-Learning-Journey/React/Udemy-React-Complete-Guide/FullStackJS/frontend/src/pages/NewEvent.js\";\nimport { json } from 'react-router-dom';\nimport EventForm from \"../components/EventForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewEventPage = () => {\n  // aooriach #1\n  // const submitHandler = (event) => {\n  //     event.preventDefault();\n  /* extract data from the form with the help of two-way-binding or refs and manually sen HTTP request here,\n   manage some loading and error state and in the end navigate from this page once the user finished. \n   ( navigate away with useNavigate hook ) */\n  // }\n  return /*#__PURE__*/_jsxDEV(EventForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n};\n_c = NewEventPage;\nexport default NewEventPage;\n\n// approach #2 \n/* just like using loaders, React Router allow me to use actions. Like the loader, it receives an object\nthat includes the request and params properties. */\nexport async function action({\n  request,\n  params\n}) {\n  const data = await request.formData();\n  const eventData = {\n    title: data.get('title'),\n    image: data.get('image'),\n    date: data.get('date'),\n    description: data.get('description')\n  };\n  const response = await fetch('http://localhost:8080/events', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(eventData)\n  });\n  if (!response.ok) {\n    throw json({\n      message: 'Could not save event.'\n    }, {\n      status: 500\n    });\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"NewEventPage\");","map":{"version":3,"names":["json","EventForm","jsxDEV","_jsxDEV","NewEventPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","request","params","data","formData","eventData","title","get","image","date","description","response","fetch","method","headers","body","JSON","stringify","ok","message","status","$RefreshReg$"],"sources":["/Users/aciubucciu/Desktop/Personal/Learning/My-Learning-Journey/React/Udemy-React-Complete-Guide/FullStackJS/frontend/src/pages/NewEvent.js"],"sourcesContent":["import {json} from 'react-router-dom' \nimport EventForm from \"../components/EventForm\";\n\nconst NewEventPage = () => {\n    // aooriach #1\n    // const submitHandler = (event) => {\n    //     event.preventDefault();\n        /* extract data from the form with the help of two-way-binding or refs and manually sen HTTP request here,\n         manage some loading and error state and in the end navigate from this page once the user finished. \n         ( navigate away with useNavigate hook ) */\n    // }\n    return (\n        <EventForm />\n    );\n}\n\nexport default NewEventPage;\n\n// approach #2 \n/* just like using loaders, React Router allow me to use actions. Like the loader, it receives an object\nthat includes the request and params properties. */\nexport async function action({request, params}) {\n    const data = await request.formData();\n    const eventData = {\n        title: data.get('title'),\n        image: data.get('image'),\n        date: data.get('date'),\n        description: data.get('description')\n    };\n\n    const response = await fetch('http://localhost:8080/events', {\n        method: 'POST',\n        headers: {\n            'Content-Type':'application/json'\n        },\n        body: JSON.stringify(eventData)\n    });\n\n    if(!response.ok){\n        throw json({ message: 'Could not save event.' }, { status: 500 })\n    }\n}"],"mappings":";AAAA,SAAQA,IAAI,QAAO,kBAAkB;AACrC,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACvB;EACA;EACA;EACI;AACR;AACA;EACI;EACA,oBACID,OAAA,CAACF,SAAS;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAErB,CAAC;AAAAC,EAAA,GAXKL,YAAY;AAalB,eAAeA,YAAY;;AAE3B;AACA;AACA;AACA,OAAO,eAAeM,MAAMA,CAAC;EAACC,OAAO;EAAEC;AAAM,CAAC,EAAE;EAC5C,MAAMC,IAAI,GAAG,MAAMF,OAAO,CAACG,QAAQ,CAAC,CAAC;EACrC,MAAMC,SAAS,GAAG;IACdC,KAAK,EAAEH,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBC,KAAK,EAAEL,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBE,IAAI,EAAEN,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC;IACtBG,WAAW,EAAEP,IAAI,CAACI,GAAG,CAAC,aAAa;EACvC,CAAC;EAED,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;IACzDC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAC;IACnB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,SAAS;EAClC,CAAC,CAAC;EAEF,IAAG,CAACM,QAAQ,CAACO,EAAE,EAAC;IACZ,MAAM5B,IAAI,CAAC;MAAE6B,OAAO,EAAE;IAAwB,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACrE;AACJ;AAAC,IAAArB,EAAA;AAAAsB,YAAA,CAAAtB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}