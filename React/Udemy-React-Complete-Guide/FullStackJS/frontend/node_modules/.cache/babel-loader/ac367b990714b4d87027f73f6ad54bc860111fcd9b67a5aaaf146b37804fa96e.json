{"ast":null,"code":"var _jsxFileName = \"/Users/aciubucciu/Desktop/Personal/Learning/My-Learning-Journey/React/Udemy-React-Complete-Guide/FullStackJS/frontend/src/pages/NewEvent.js\";\nimport { json, redirect } from 'react-router-dom';\nimport EventForm from \"../components/EventForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewEventPage = () => {\n  // aooriach #1\n  // const submitHandler = (event) => {\n  //     event.preventDefault();\n  /* extract data from the form with the help of two-way-binding or refs and manually sen HTTP request here,\n   manage some loading and error state and in the end navigate from this page once the user finished. \n   ( navigate away with useNavigate hook ) */\n  // }\n  return /*#__PURE__*/_jsxDEV(EventForm, {\n    method: \"post\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n};\n_c = NewEventPage;\nexport default NewEventPage;\n\n// approach #2 \n/* just like using loaders, React Router allow me to use actions. Like the loader, it receives an object\nthat includes the request and params properties. */\nvar _c;\n$RefreshReg$(_c, \"NewEventPage\");","map":{"version":3,"names":["json","redirect","EventForm","jsxDEV","_jsxDEV","NewEventPage","method","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aciubucciu/Desktop/Personal/Learning/My-Learning-Journey/React/Udemy-React-Complete-Guide/FullStackJS/frontend/src/pages/NewEvent.js"],"sourcesContent":["import { json, redirect } from 'react-router-dom' \nimport EventForm from \"../components/EventForm\";\n\nconst NewEventPage = () => {\n    // aooriach #1\n    // const submitHandler = (event) => {\n    //     event.preventDefault();\n        /* extract data from the form with the help of two-way-binding or refs and manually sen HTTP request here,\n         manage some loading and error state and in the end navigate from this page once the user finished. \n         ( navigate away with useNavigate hook ) */\n    // }\n    return (\n        <EventForm method=\"post\"/>\n    );\n}\n\nexport default NewEventPage;\n\n// approach #2 \n/* just like using loaders, React Router allow me to use actions. Like the loader, it receives an object\nthat includes the request and params properties. */\n"],"mappings":";AAAA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AACjD,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACvB;EACA;EACA;EACI;AACR;AACA;EACI;EACA,oBACID,OAAA,CAACF,SAAS;IAACI,MAAM,EAAC;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;AAElC,CAAC;AAAAC,EAAA,GAXKN,YAAY;AAalB,eAAeA,YAAY;;AAE3B;AACA;AACA;AADA,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}