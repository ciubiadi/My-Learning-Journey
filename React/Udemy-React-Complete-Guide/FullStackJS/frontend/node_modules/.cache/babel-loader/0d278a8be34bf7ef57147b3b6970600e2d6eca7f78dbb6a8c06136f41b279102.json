{"ast":null,"code":"var _jsxFileName = \"/Users/aciubucciu/Desktop/Personal/Learning/My-Learning-Journey/React/Udemy-React-Complete-Guide/FullStackJS/frontend/src/pages/Error.js\",\n  _s = $RefreshSig$();\nimport { useRouteError } from 'react-router-dom';\nimport PageContent from \"../components/PageContent\";\nimport MainNavigation from '../components/MainNavigation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ErrorPage = () => {\n  _s();\n  const error = useRouteError();\n  let title = 'An error occurred!';\n  let message = 'Something went wrong!';\n  if (error.status === 500) {\n    // message = JSON.parse(error.data).message;\n\n    // if I use the json function from react-router-dom I don't need to parse the json, it will be done automatically\n    message = error.data.message;\n  }\n  if (error.status === 404) {\n    title = 'Not Found!';\n    message = 'Could not find resource or page';\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MainNavigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PageContent, {\n      title: title,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(ErrorPage, \"oAgjgbJzsRXlB89+MoVumxMQqKM=\", false, function () {\n  return [useRouteError];\n});\n_c = ErrorPage;\nexport default ErrorPage;\nvar _c;\n$RefreshReg$(_c, \"ErrorPage\");","map":{"version":3,"names":["useRouteError","PageContent","MainNavigation","jsxDEV","_jsxDEV","Fragment","_Fragment","ErrorPage","_s","error","title","message","status","data","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aciubucciu/Desktop/Personal/Learning/My-Learning-Journey/React/Udemy-React-Complete-Guide/FullStackJS/frontend/src/pages/Error.js"],"sourcesContent":["import { useRouteError } from 'react-router-dom'\nimport PageContent from \"../components/PageContent\"\nimport MainNavigation from '../components/MainNavigation';\n\nconst ErrorPage = () => {\n    const error = useRouteError();\n\n    let title = 'An error occurred!';\n    let message = 'Something went wrong!';\n\n    if(error.status === 500){\n        // message = JSON.parse(error.data).message;\n\n        // if I use the json function from react-router-dom I don't need to parse the json, it will be done automatically\n        message = error.data.message;\n    }\n\n    if(error.status === 404){\n        title = 'Not Found!';\n        message = 'Could not find resource or page';\n    }\n\n    return (\n        <>\n            <MainNavigation />\n            <PageContent title={title}>\n                <p>{message}</ p>\n            </PageContent>\n        </>\n    )\n}\n\nexport default ErrorPage;"],"mappings":";;AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,cAAc,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1D,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,KAAK,GAAGT,aAAa,CAAC,CAAC;EAE7B,IAAIU,KAAK,GAAG,oBAAoB;EAChC,IAAIC,OAAO,GAAG,uBAAuB;EAErC,IAAGF,KAAK,CAACG,MAAM,KAAK,GAAG,EAAC;IACpB;;IAEA;IACAD,OAAO,GAAGF,KAAK,CAACI,IAAI,CAACF,OAAO;EAChC;EAEA,IAAGF,KAAK,CAACG,MAAM,KAAK,GAAG,EAAC;IACpBF,KAAK,GAAG,YAAY;IACpBC,OAAO,GAAG,iCAAiC;EAC/C;EAEA,oBACIP,OAAA,CAAAE,SAAA;IAAAQ,QAAA,gBACIV,OAAA,CAACF,cAAc;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClBd,OAAA,CAACH,WAAW;MAACS,KAAK,EAAEA,KAAM;MAAAI,QAAA,eACtBV,OAAA;QAAAU,QAAA,EAAIH;MAAO;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAAA,eAChB,CAAC;AAEX,CAAC;AAAAV,EAAA,CA1BKD,SAAS;EAAA,QACGP,aAAa;AAAA;AAAAmB,EAAA,GADzBZ,SAAS;AA4Bf,eAAeA,SAAS;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}