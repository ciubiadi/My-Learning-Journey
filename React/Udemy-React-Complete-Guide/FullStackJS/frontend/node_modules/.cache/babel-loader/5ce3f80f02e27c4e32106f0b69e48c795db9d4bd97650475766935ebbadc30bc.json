{"ast":null,"code":"var _jsxFileName = \"/Users/aciubucciu/Desktop/Personal/Learning/My-Learning-Journey/React/Udemy-React-Complete-Guide/FullStackJS/frontend/src/pages/EventDetail.js\",\n  _s = $RefreshSig$();\nimport { useParams, useRouteLoaderData, useLoaderData, json } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EventDetailPage = () => {\n  _s();\n  const {\n    eventId\n  } = useParams();\n  // const params = useParams();\n  // const allparams = useParams();\n\n  // const showParams = (e) => {\n  //     e.preventDefault();\n  //     console.log(allparams);\n  // }\n\n  const data = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventItem, {\n      event: data.event\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(EventDetailPage, \"7zzDrkyvuwpGfXmf3NEL1Gx+KC0=\", false, function () {\n  return [useParams, useLoaderData];\n});\n_c = EventDetailPage;\nexport default EventDetailPage;\n\n/* React Router which calles this loader function for me, actually passes an object to this loader function when \nexecuting it for me, and that object contains 2 improtant pieces of data :\n1. A request property which contains a request object\n2. A params property which contains an object with all my route parameters.\n\nThe request object could be used to access the URL to extract query parameters or anything like that\nThe params object I can access all the route parameter values as I could do with the help of useParams.\n*/\nexport async function loader({\n  request,\n  params\n}) {\n  const id = params.eventId;\n  const res = await fetch('http://localhost:8080/events/' + id);\n  if (!res.ok) {\n    throw json({\n      message: 'Could not fetch details for selected event.'\n    }, {\n      status: 500\n    });\n  } else {\n    return res;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["useParams","useRouteLoaderData","useLoaderData","json","EventItem","jsxDEV","_jsxDEV","Fragment","_Fragment","EventDetailPage","_s","eventId","data","children","event","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","request","params","id","res","fetch","ok","message","status","$RefreshReg$"],"sources":["/Users/aciubucciu/Desktop/Personal/Learning/My-Learning-Journey/React/Udemy-React-Complete-Guide/FullStackJS/frontend/src/pages/EventDetail.js"],"sourcesContent":["import { useParams, useRouteLoaderData, useLoaderData, json } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\n\nconst EventDetailPage = () => {\n    const {eventId} = useParams();\n    // const params = useParams();\n    // const allparams = useParams();\n\n    // const showParams = (e) => {\n    //     e.preventDefault();\n    //     console.log(allparams);\n    // }\n\n    const data = useLoaderData()\n\n    return (\n        <>\n            <EventItem event={data.event} />\n            {/* <h1>EditEventPage</h1>\n            <p>Event ID: {eventId}</p> */}\n\n            {/* <p>Event ID: {params.eventId}</p> */}\n            {/* <button onClick={showParams}>Show all params</button> */}\n        </>\n    );\n}\n\nexport default EventDetailPage;\n\n\n/* React Router which calles this loader function for me, actually passes an object to this loader function when \nexecuting it for me, and that object contains 2 improtant pieces of data :\n1. A request property which contains a request object\n2. A params property which contains an object with all my route parameters.\n\nThe request object could be used to access the URL to extract query parameters or anything like that\nThe params object I can access all the route parameter values as I could do with the help of useParams.\n*/\nexport async function loader({request, params}) {\n    const id = params.eventId;\n    const res = await fetch('http://localhost:8080/events/' + id);\n    if(!res.ok){\n        throw json({message: 'Could not fetch details for selected event.'}, {\n            status: 500\n        })\n    } else {\n        return res;\n    }\n}"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,kBAAkB,EAAEC,aAAa,EAAEC,IAAI,QAAQ,kBAAkB;AACrF,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEhD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM;IAACC;EAAO,CAAC,GAAGX,SAAS,CAAC,CAAC;EAC7B;EACA;;EAEA;EACA;EACA;EACA;;EAEA,MAAMY,IAAI,GAAGV,aAAa,CAAC,CAAC;EAE5B,oBACII,OAAA,CAAAE,SAAA;IAAAK,QAAA,eACIP,OAAA,CAACF,SAAS;MAACU,KAAK,EAAEF,IAAI,CAACE;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAMlC,CAAC;AAEX,CAAC;AAAAR,EAAA,CAtBKD,eAAe;EAAA,QACCT,SAAS,EASdE,aAAa;AAAA;AAAAiB,EAAA,GAVxBV,eAAe;AAwBrB,eAAeA,eAAe;;AAG9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeW,MAAMA,CAAC;EAACC,OAAO;EAAEC;AAAM,CAAC,EAAE;EAC5C,MAAMC,EAAE,GAAGD,MAAM,CAACX,OAAO;EACzB,MAAMa,GAAG,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGF,EAAE,CAAC;EAC7D,IAAG,CAACC,GAAG,CAACE,EAAE,EAAC;IACP,MAAMvB,IAAI,CAAC;MAACwB,OAAO,EAAE;IAA6C,CAAC,EAAE;MACjEC,MAAM,EAAE;IACZ,CAAC,CAAC;EACN,CAAC,MAAM;IACH,OAAOJ,GAAG;EACd;AACJ;AAAC,IAAAL,EAAA;AAAAU,YAAA,CAAAV,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}