{"ast":null,"code":"var _jsxFileName = \"/Users/aciubucciu/Desktop/Personal/Learning/My-Learning-Journey/React/Udemy-React-Complete-Guide/FullStackJS/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from 'react';\nimport { useLoaderData, json, defer } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  //   const [isLoading, setIsLoading] = useState(false);\n  //   const [fetchedEvents, setFetchedEvents] = useState();\n  //   const [error, setError] = useState();\n\n  //   useEffect(() => {\n  //     async function fetchEvents() {\n  //       setIsLoading(true);\n  //   const response = await fetch('http://localhost:8080/events');\n\n  //   if (!response.ok) {\n  //     setError('Fetching events failed.');\n  //   } else {\n  //     const resData = await response.json();\n  //     setFetchedEvents(resData.events);\n  //   }\n  //       setIsLoading(false);\n  //     }\n\n  //     fetchEvents();\n  //   }, []);\n\n  // #2\n  // const events = useLoaderData();\n\n  // #2\n  // const data = useLoaderData();\n\n  const {\n    events\n  } = useLoaderData();\n\n  // if(data.isError){\n  //     return <p>{data.message}</p>\n  // }\n\n  // const events = data.events;\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"22Av1LduzrZxSsk8kXUUCix36lQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\n\n// export async function loader() {\n//     const response = await fetch('http://localhost:8080/events');\n\n//     if (!response.ok) {\n//       console.log('Error!')\n//   return {\n//     isError: true,\n//     message: 'Could not fetch events. '\n//   }\n\n// throw response #1 approach\n// throw new Response(JSON.stringify({\n//     message: 'Could not fetch events.'\n// }), {\n//     status: 500,\n// }); \n\n// thorw response #2 approach\n//     throw json(\n//         {message: 'Could not fetch events.'}, \n//         {\n//             status: 500,\n//         }\n//     );\n// } else {\n//   const resData = await response.json();\n//   console.log('resData');\n//   console.log(resData);\n//   return resData.events;\n\n// Return a Response with the\n// const res= new Response('any data', {status: 201});\n// return res; \n\n//         return response;\n//     }\n// }\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","events","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["/Users/aciubucciu/Desktop/Personal/Learning/My-Learning-Journey/React/Udemy-React-Complete-Guide/FullStackJS/frontend/src/pages/Events.js"],"sourcesContent":["// import { useEffect, useState } from 'react';\nimport { useLoaderData, json, defer } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\n\nfunction EventsPage() {\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [fetchedEvents, setFetchedEvents] = useState();\n//   const [error, setError] = useState();\n\n//   useEffect(() => {\n//     async function fetchEvents() {\n//       setIsLoading(true);\n    //   const response = await fetch('http://localhost:8080/events');\n\n    //   if (!response.ok) {\n    //     setError('Fetching events failed.');\n    //   } else {\n    //     const resData = await response.json();\n    //     setFetchedEvents(resData.events);\n    //   }\n//       setIsLoading(false);\n//     }\n\n//     fetchEvents();\n//   }, []);\n\n    // #2\n    // const events = useLoaderData();\n\n    // #2\n    // const data = useLoaderData();\n\n    const {events} = useLoaderData();\n\n    // if(data.isError){\n    //     return <p>{data.message}</p>\n    // }\n\n    // const events = data.events;\n\n  return (\n    <>\n    {/* Approach #1 */}\n      {/* <div style={{ textAlign: 'center' }}>\n        {isLoading && <p>Loading...</p>}\n        {error && <p>{error}</p>}\n      </div> */}\n      {/* {!isLoading && fetchedEvents && <EventsList events={fetchedEvents} />} */}\n\n      {/* Appraoch #2 */}\n      <EventsList events={events} />\n\n      {/* Approach #3 */}\n      {/* <EventsList /> */}\n    </>\n  );\n}\n\nexport default EventsPage;\n\nasync function loadEvents () {\n    const response = await fetch('http://localhost:8080/events');\n\n    if (!response.ok) {\n        throw json(\n            {message: 'Could not fetch events.'}, \n            {\n                status: 500,\n            }\n        );\n    } else {\n        return response;\n    }\n}\n\nexport function loader() {\n    return defer({\n        events: loadEvents()\n    })\n}\n\n// export async function loader() {\n//     const response = await fetch('http://localhost:8080/events');\n\n//     if (!response.ok) {\n//       console.log('Error!')\n    //   return {\n    //     isError: true,\n    //     message: 'Could not fetch events. '\n    //   }\n        \n        // throw response #1 approach\n        // throw new Response(JSON.stringify({\n        //     message: 'Could not fetch events.'\n        // }), {\n        //     status: 500,\n        // }); \n\n        // thorw response #2 approach\n    //     throw json(\n    //         {message: 'Could not fetch events.'}, \n    //         {\n    //             status: 500,\n    //         }\n    //     );\n    // } else {\n    //   const resData = await response.json();\n        //   console.log('resData');\n        //   console.log(resData);\n        //   return resData.events;\n        \n        // Return a Response with the\n        // const res= new Response('any data', {status: 201});\n        // return res; \n\n//         return response;\n//     }\n// }"],"mappings":";;AAAA;AACA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,QAAQ,kBAAkB;AAC7D,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACtB;EACA;EACA;;EAEA;EACA;EACA;EACI;;EAEA;EACA;EACA;EACA;EACA;EACA;EACJ;EACA;;EAEA;EACA;;EAEI;EACA;;EAEA;EACA;;EAEA,MAAM;IAACC;EAAM,CAAC,GAAGV,aAAa,CAAC,CAAC;;EAEhC;EACA;EACA;;EAEA;;EAEF,oBACEK,OAAA,CAAAE,SAAA;IAAAI,QAAA,eASEN,OAAA,CAACF,UAAU;MAACO,MAAM,EAAEA;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAI9B,CAAC;AAEP;AAACN,EAAA,CApDQD,UAAU;EAAA,QA4BER,aAAa;AAAA;AAAAgB,EAAA,GA5BzBR,UAAU;AAsDnB,eAAeA,UAAU;AAEzB,eAAeS,UAAUA,CAAA,EAAI;EACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd,MAAMnB,IAAI,CACN;MAACoB,OAAO,EAAE;IAAyB,CAAC,EACpC;MACIC,MAAM,EAAE;IACZ,CACJ,CAAC;EACL,CAAC,MAAM;IACH,OAAOJ,QAAQ;EACnB;AACJ;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EACrB,OAAOrB,KAAK,CAAC;IACTQ,MAAM,EAAEO,UAAU,CAAC;EACvB,CAAC,CAAC;AACN;;AAEA;AACA;;AAEA;AACA;AACI;AACA;AACA;AACA;;AAEI;AACA;AACA;AACA;AACA;AACA;;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACA;AACA;;AAEA;AACA;AACA;;AAER;AACA;AACA;AAAA,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}