{"ast":null,"code":"var _jsxFileName = \"/Users/aciubucciu/Desktop/Personal/Learning/My-Learning-Journey/React/Udemy-React-Complete-Guide/FullStackJS/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from 'react';\nimport { useLoaderData, json } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nasync function loadEvents() {}\nfunction EventsPage() {\n  _s();\n  //   const [isLoading, setIsLoading] = useState(false);\n  //   const [fetchedEvents, setFetchedEvents] = useState();\n  //   const [error, setError] = useState();\n\n  //   useEffect(() => {\n  //     async function fetchEvents() {\n  //       setIsLoading(true);\n  //   const response = await fetch('http://localhost:8080/events');\n\n  //   if (!response.ok) {\n  //     setError('Fetching events failed.');\n  //   } else {\n  //     const resData = await response.json();\n  //     setFetchedEvents(resData.events);\n  //   }\n  //       setIsLoading(false);\n  //     }\n\n  //     fetchEvents();\n  //   }, []);\n\n  // #2\n  // const events = useLoaderData();\n\n  // #2\n  const data = useLoaderData();\n  if (data.isError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 16\n    }, this);\n  }\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport async function loader() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    console.log('Error!');\n    //   return {\n    //     isError: true,\n    //     message: 'Could not fetch events. '\n    //   }\n\n    // throw response #1 approach\n    // throw new Response(JSON.stringify({\n    //     message: 'Could not fetch events.'\n    // }), {\n    //     status: 500,\n    // }); \n\n    // thorw response #2 approach\n    throw json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    //   const resData = await response.json();\n    //   console.log('resData');\n    //   console.log(resData);\n    //   return resData.events;\n\n    // Return a Response with the\n    // const res= new Response('any data', {status: 201});\n    // return res; \n\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","loadEvents","EventsPage","_s","data","isError","children","message","fileName","_jsxFileName","lineNumber","columnNumber","events","_c","loader","response","fetch","ok","console","log","status","$RefreshReg$"],"sources":["/Users/aciubucciu/Desktop/Personal/Learning/My-Learning-Journey/React/Udemy-React-Complete-Guide/FullStackJS/frontend/src/pages/Events.js"],"sourcesContent":["// import { useEffect, useState } from 'react';\nimport { useLoaderData, json } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\n\nasync function loadEvents () {\n    \n}\n\nfunction EventsPage() {\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [fetchedEvents, setFetchedEvents] = useState();\n//   const [error, setError] = useState();\n\n//   useEffect(() => {\n//     async function fetchEvents() {\n//       setIsLoading(true);\n    //   const response = await fetch('http://localhost:8080/events');\n\n    //   if (!response.ok) {\n    //     setError('Fetching events failed.');\n    //   } else {\n    //     const resData = await response.json();\n    //     setFetchedEvents(resData.events);\n    //   }\n//       setIsLoading(false);\n//     }\n\n//     fetchEvents();\n//   }, []);\n\n    // #2\n    // const events = useLoaderData();\n\n    // #2\n    const data = useLoaderData();\n    if(data.isError){\n        return <p>{data.message}</p>\n    }\n    const events = data.events;\n\n  return (\n    <>\n    {/* Approach #1 */}\n      {/* <div style={{ textAlign: 'center' }}>\n        {isLoading && <p>Loading...</p>}\n        {error && <p>{error}</p>}\n      </div> */}\n      {/* {!isLoading && fetchedEvents && <EventsList events={fetchedEvents} />} */}\n\n      {/* Appraoch #2 */}\n      <EventsList events={events} />\n\n      {/* Approach #3 */}\n      {/* <EventsList /> */}\n    </>\n  );\n}\n\nexport default EventsPage;\n\nexport async function loader() {\n    const response = await fetch('http://localhost:8080/events');\n\n    if (!response.ok) {\n      console.log('Error!')\n    //   return {\n    //     isError: true,\n    //     message: 'Could not fetch events. '\n    //   }\n        \n        // throw response #1 approach\n        // throw new Response(JSON.stringify({\n        //     message: 'Could not fetch events.'\n        // }), {\n        //     status: 500,\n        // }); \n\n        // thorw response #2 approach\n        throw json(\n            {message: 'Could not fetch events.'}, \n            {\n                status: 500,\n            }\n        );\n    } else {\n    //   const resData = await response.json();\n        //   console.log('resData');\n        //   console.log(resData);\n        //   return resData.events;\n        \n        // Return a Response with the\n        // const res= new Response('any data', {status: 201});\n        // return res; \n\n        return response;\n    }\n}"],"mappings":";;AAAA;AACA,SAASA,aAAa,EAAEC,IAAI,QAAQ,kBAAkB;AACtD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,eAAeC,UAAUA,CAAA,EAAI,CAE7B;AAEA,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACtB;EACA;EACA;;EAEA;EACA;EACA;EACI;;EAEA;EACA;EACA;EACA;EACA;EACA;EACJ;EACA;;EAEA;EACA;;EAEI;EACA;;EAEA;EACA,MAAMC,IAAI,GAAGV,aAAa,CAAC,CAAC;EAC5B,IAAGU,IAAI,CAACC,OAAO,EAAC;IACZ,oBAAOP,OAAA;MAAAQ,QAAA,EAAIF,IAAI,CAACG;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAChC;EACA,MAAMC,MAAM,GAAGR,IAAI,CAACQ,MAAM;EAE5B,oBACEd,OAAA,CAAAE,SAAA;IAAAM,QAAA,eASER,OAAA,CAACF,UAAU;MAACgB,MAAM,EAAEA;IAAO;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAI9B,CAAC;AAEP;AAACR,EAAA,CAhDQD,UAAU;EAAA,QA0BFR,aAAa;AAAA;AAAAmB,EAAA,GA1BrBX,UAAU;AAkDnB,eAAeA,UAAU;AAEzB,OAAO,eAAeY,MAAMA,CAAA,EAAG;EAC3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChBC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACvB;IACA;IACA;IACA;;IAEI;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA,MAAMxB,IAAI,CACN;MAACY,OAAO,EAAE;IAAyB,CAAC,EACpC;MACIa,MAAM,EAAE;IACZ,CACJ,CAAC;EACL,CAAC,MAAM;IACP;IACI;IACA;IACA;;IAEA;IACA;IACA;;IAEA,OAAOL,QAAQ;EACnB;AACJ;AAAC,IAAAF,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}