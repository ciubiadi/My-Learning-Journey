{"ast":null,"code":"var _jsxFileName = \"/Users/aciubucciu/Desktop/Personal/Learning/My-Learning-Journey/React/Udemy-React-Complete-Guide/FullStackJS/frontend/src/pages/EventDetail.js\",\n  _s = $RefreshSig$();\nimport { useParams, useRouteLoaderData, useLoaderData, json, redirect } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EventDetailPage = () => {\n  _s();\n  const {\n    eventId\n  } = useParams();\n  // const params = useParams();\n  // const allparams = useParams();\n\n  // const showParams = (e) => {\n  //     e.preventDefault();\n  //     console.log(allparams);\n  // }\n\n  // const data = useLoaderData()\n  const data = useRouteLoaderData('event-detail');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(EventItem, {\n      event: data.event\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(EventDetailPage, \"6mEUhePFKtrvWDebJorZByMIS0M=\", false, function () {\n  return [useParams, useRouteLoaderData];\n});\n_c = EventDetailPage;\nexport default EventDetailPage;\nasync function loadEvent(id) {\n  const res = await fetch('http://localhost:8080/events/' + id);\n  if (!res.ok) {\n    throw json({\n      message: 'Could not fetch details for selected event.'\n    }, {\n      status: 500\n    });\n  } else {\n    return res;\n  }\n}\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    // return response;\n    const resData = await response.json();\n    return resData.events;\n  }\n}\n\n/* React Router which calles this loader function for me, actually passes an object to this loader function when \nexecuting it for me, and that object contains 2 improtant pieces of data :\n1. A request property which contains a request object\n2. A params property which contains an object with all my route parameters.\n\nThe request object could be used to access the URL to extract query parameters or anything like that\nThe params object I can access all the route parameter values as I could do with the help of useParams.\n*/\nexport async function loader({\n  request,\n  params\n}) {\n  const id = params.eventId;\n  const res = await fetch('http://localhost:8080/events/' + id);\n  if (!res.ok) {\n    throw json({\n      message: 'Could not fetch details for selected event.'\n    }, {\n      status: 500\n    });\n  } else {\n    return res;\n  }\n}\n\n// delete an event\nexport async function action({\n  params,\n  request\n}) {\n  const eventId = params.eventId;\n  const response = await fetch('http://localhost:8080/events/' + eventId, {\n    method: request.method\n  });\n  if (!response.ok) {\n    throw json({\n      message: 'Could not delete event.'\n    }, {\n      status: 500\n    });\n  }\n  return redirect('/events');\n}\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["useParams","useRouteLoaderData","useLoaderData","json","redirect","EventItem","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventDetailPage","_s","eventId","data","children","event","fileName","_jsxFileName","lineNumber","columnNumber","events","_c","loadEvent","id","res","fetch","ok","message","status","loadEvents","response","resData","loader","request","params","action","method","$RefreshReg$"],"sources":["/Users/aciubucciu/Desktop/Personal/Learning/My-Learning-Journey/React/Udemy-React-Complete-Guide/FullStackJS/frontend/src/pages/EventDetail.js"],"sourcesContent":["import { useParams, useRouteLoaderData, useLoaderData, json, redirect } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport EventsList from \"../components/EventsList\";\n\nconst EventDetailPage = () => {\n    const {eventId} = useParams();\n    // const params = useParams();\n    // const allparams = useParams();\n\n    // const showParams = (e) => {\n    //     e.preventDefault();\n    //     console.log(allparams);\n    // }\n\n    // const data = useLoaderData()\n    const data = useRouteLoaderData('event-detail')\n\n    return (\n        <>\n            <EventItem event={data.event} />\n            <EventsList events={events}/>\n            {/* <h1>EditEventPage</h1>\n            <p>Event ID: {eventId}</p> */}\n\n            {/* <p>Event ID: {params.eventId}</p> */}\n            {/* <button onClick={showParams}>Show all params</button> */}\n        </>\n    );\n}\n\nexport default EventDetailPage;\n\nasync function loadEvent(id){\n    const res = await fetch('http://localhost:8080/events/' + id);\n    if(!res.ok){\n        throw json({message: 'Could not fetch details for selected event.'}, {\n            status: 500\n        })\n    } else {\n        return res;\n    }\n}\n\nasync function loadEvents () {\n    const response = await fetch('http://localhost:8080/events');\n\n    if (!response.ok) {\n        throw json(\n            {message: 'Could not fetch events.'}, \n            {\n                status: 500,\n            }\n        );\n    } else {\n        // return response;\n        const resData = await response.json();\n        return resData.events;\n    }\n}\n\n\n/* React Router which calles this loader function for me, actually passes an object to this loader function when \nexecuting it for me, and that object contains 2 improtant pieces of data :\n1. A request property which contains a request object\n2. A params property which contains an object with all my route parameters.\n\nThe request object could be used to access the URL to extract query parameters or anything like that\nThe params object I can access all the route parameter values as I could do with the help of useParams.\n*/\nexport async function loader({request, params}) {\n    const id = params.eventId;\n    const res = await fetch('http://localhost:8080/events/' + id);\n    if(!res.ok){\n        throw json({message: 'Could not fetch details for selected event.'}, {\n            status: 500\n        })\n    } else {\n        return res;\n    }\n}\n\n// delete an event\nexport async function action({ params, request }) {\n    const eventId = params.eventId;\n    const response = await fetch('http://localhost:8080/events/' + eventId, {\n      method: request.method,\n    });\n  \n    if (!response.ok) {\n      throw json(\n        { message: 'Could not delete event.' },\n        {\n          status: 500,\n        }\n      );\n    }\n    return redirect('/events');\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}