The only time we must use class based components is when we need Error Boundries

componentDidMount() :
- is called once component is mounted ( was evaluated and rendered )
- is equivalent with the useEffect with empty dependecy array (e.g : useEffect(() => {}, [])  )

componentDidUpdate() :
- is called once component was updated ( was evaluated & rendered )
- is equivalent with the useEffect with some dependencies. ( Whenever the dependecy change the componenet will re-render)

componentWillUnmount() :
- is called right before the component is unmounted
- the equivalent of this is the cleanup function from useEffect 
- e.g : useEffect(() => {
    return () => {}
},[])

componentDidCatch() : 
- can be added to any class based component and whenever I add it it makes that class based 
componenet an Error Boundary.
- it can't be used with functional components
- this runs whenever one of the child components throws / generates an error. Therefore I add a render method and 
I return props.children in order to wrap the ErrorBoudndary around components which should be protected by that 
component.( we wrap this around components may throw errors)
