{"ast":null,"code":"var _jsxFileName = \"/Users/aciubucciu/Desktop/Practice/Last-Journey/React/Udemy-React-Complete-Guide/Behind the scenes and optimization techniques/01-starting-setup/src/App.js\",\n  _s = $RefreshSig$();\n/*\nuseCallback allows us to store a function across component execution. It allows us to tell React that I want ot save \na function and this function should not be recreated with every component execution\n*/\nimport React, { useState, useCallback } from \"react\";\nimport Button from \"./components/UI/Button/Button\";\nimport DemoOutput from \"./components/Demo/DemoOutput\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [showP, setShowP] = useState(false);\n  const [allowToggle, setAllowToggle] = useState(false);\n  console.log(\"app is running\");\n\n  //Basically if I know that this function will never change, I can use useCallback to store it\n  //useCallback allows me to save the function so I can reuse it.\n  const toggleP = useCallback(() => {\n    if (allowToggle) {\n      // setShowP(!showP);\n      setShowP(prevShowP => !prevShowP);\n    }\n  }, []);\n  const alowToggleHandler = () => {\n    setAllowToggle(true);\n  };\n  return (\n    /*#__PURE__*/\n    // The App component is rerendered when the button is clicked because the state is managed in the App omponent,\n    // even if the change vissualy affects only the DemoOutput\n    _jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hi there!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(DemoOutput, {\n        show: showP\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: alowToggleHandler,\n        children: \"Allow toggling\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: toggleP,\n        children: \"Toggle P\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(App, \"AmXTQEocSzLRU6ZXXpqKDuXvAWw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","Button","DemoOutput","jsxDEV","_jsxDEV","App","_s","showP","setShowP","allowToggle","setAllowToggle","console","log","toggleP","prevShowP","alowToggleHandler","className","children","fileName","_jsxFileName","lineNumber","columnNumber","show","onClick","_c","$RefreshReg$"],"sources":["/Users/aciubucciu/Desktop/Practice/Last-Journey/React/Udemy-React-Complete-Guide/Behind the scenes and optimization techniques/01-starting-setup/src/App.js"],"sourcesContent":["/*\nuseCallback allows us to store a function across component execution. It allows us to tell React that I want ot save \na function and this function should not be recreated with every component execution\n*/\nimport React, { useState, useCallback } from \"react\";\nimport Button from \"./components/UI/Button/Button\";\nimport DemoOutput from \"./components/Demo/DemoOutput\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [showP, setShowP] = useState(false);\n  const [allowToggle, setAllowToggle] = useState(false);\n\n  console.log(\"app is running\");\n\n  //Basically if I know that this function will never change, I can use useCallback to store it\n  //useCallback allows me to save the function so I can reuse it.\n  const toggleP = useCallback(() => {\n    if (allowToggle) {\n      // setShowP(!showP);\n      setShowP((prevShowP) => !prevShowP);\n    }\n  }, []);\n\n  const alowToggleHandler = () => {\n    setAllowToggle(true);\n  };\n\n  return (\n    // The App component is rerendered when the button is clicked because the state is managed in the App omponent,\n    // even if the change vissualy affects only the DemoOutput\n    <div className=\"app\">\n      <h1>Hi there!</h1>\n      {/* {showP && <p>This is the p</p>} */}\n      {/* pass false value to the show prop and see that the DemoOutput will not re-render with the memo method, but \n      if the state showP is passed trough prop, it will re-render because of the change. */}\n      <DemoOutput show={showP} />\n      <Button onClick={alowToggleHandler}>Allow toggling</Button>\n      <Button onClick={toggleP}>Toggle P</Button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACpD,OAAOC,MAAM,MAAM,+BAA+B;AAClD,OAAOC,UAAU,MAAM,8BAA8B;AAErD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACzC,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAErDY,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;;EAE7B;EACA;EACA,MAAMC,OAAO,GAAGb,WAAW,CAAC,MAAM;IAChC,IAAIS,WAAW,EAAE;MACf;MACAD,QAAQ,CAAEM,SAAS,IAAK,CAACA,SAAS,CAAC;IACrC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC9BL,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED;IAAA;IACE;IACA;IACAN,OAAA;MAAKY,SAAS,EAAC,KAAK;MAAAC,QAAA,gBAClBb,OAAA;QAAAa,QAAA,EAAI;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAIlBjB,OAAA,CAACF,UAAU;QAACoB,IAAI,EAAEf;MAAM;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC3BjB,OAAA,CAACH,MAAM;QAACsB,OAAO,EAAER,iBAAkB;QAAAE,QAAA,EAAC;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC3DjB,OAAA,CAACH,MAAM;QAACsB,OAAO,EAAEV,OAAQ;QAAAI,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC;EAAC;AAEV;AAACf,EAAA,CAhCQD,GAAG;AAAAmB,EAAA,GAAHnB,GAAG;AAkCZ,eAAeA,GAAG;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}