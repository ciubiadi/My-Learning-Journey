{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalCartQuantity: 0,\n    totalCartAmount: 0\n  },\n  reducers: {\n    addItem: (state, action) => {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      // if(!existingItem){\n      //     state.items.push(existingItem)\n      // } else {\n      //     const existingItemIndex = state.items.findIndex(item => item.id === newItem.id)\n      //     state.items[existingItemIndex].quantity++; \n      // }\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n      state.totalCartQuantity++;\n    },\n    removeItem: (state, action) => {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n      state.totalCartQuantity--;\n    },\n    replaceCart(state, action) {\n      state.totalCartQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    }\n  }\n});\nexport const {\n  addItem,\n  removeItem,\n  replaceCart\n} = cartSlice.actions;\n// export const cartActions = cartSlice.actions;\n\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","cartSlice","name","initialState","items","totalCartQuantity","totalCartAmount","reducers","addItem","state","action","newItem","payload","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItem","filter","replaceCart","totalQuantity","actions","reducer"],"sources":["/Users/aciubucciu/Desktop/Personal/Learning/My-Learning-Journey/React/Udemy-React-Complete-Guide/Advanced-Redux/Redux Project/src/store/cart-slice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const cartSlice = createSlice({\n    name: 'cart',\n    initialState: {\n        items: [],\n        totalCartQuantity: 0,\n        totalCartAmount: 0\n    },\n    reducers: {\n        addItem: (state, action) => {\n            const newItem = action.payload;\n            const existingItem = state.items.find(item => item.id === newItem.id);\n            // if(!existingItem){\n            //     state.items.push(existingItem)\n            // } else {\n            //     const existingItemIndex = state.items.findIndex(item => item.id === newItem.id)\n            //     state.items[existingItemIndex].quantity++; \n            // }\n            if(!existingItem){\n                state.items.push({\n                    id: newItem.id,\n                    price: newItem.price,\n                    quantity: 1,\n                    totalPrice: newItem.price,\n                    name: newItem.title\n                });\n            } else {\n                existingItem.quantity++;\n                existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n            }\n            state.totalCartQuantity++;\n            \n        },\n        removeItem: (state, action) => {\n            const id = action.payload;\n            const existingItem = state.items.find(item => item.id === id);\n\n            if(existingItem.quantity === 1 ) {\n                state.items = state.items.filter(item => item.id !== id)\n            } else {\n                existingItem.quantity--;\n                existingItem.totalPrice  = existingItem.totalPrice - existingItem.price; \n            }\n            state.totalCartQuantity--;\n\n        },\n        replaceCart(state, action) {\n            state.totalCartQuantity = action.payload.totalQuantity;\n            state.items = action.payload.items;\n          },\n    }\n});\n\nexport const {addItem, removeItem, replaceCart} = cartSlice.actions;\n// export const cartActions = cartSlice.actions;\n\nexport default cartSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,OAAO,MAAMC,SAAS,GAAGD,WAAW,CAAC;EACjCE,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACVC,KAAK,EAAE,EAAE;IACTC,iBAAiB,EAAE,CAAC;IACpBC,eAAe,EAAE;EACrB,CAAC;EACDC,QAAQ,EAAE;IACNC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACxB,MAAMC,OAAO,GAAGD,MAAM,CAACE,OAAO;MAC9B,MAAMC,YAAY,GAAGJ,KAAK,CAACL,KAAK,CAACU,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;MACrE;MACA;MACA;MACA;MACA;MACA;MACA,IAAG,CAACH,YAAY,EAAC;QACbJ,KAAK,CAACL,KAAK,CAACa,IAAI,CAAC;UACbD,EAAE,EAAEL,OAAO,CAACK,EAAE;UACdE,KAAK,EAAEP,OAAO,CAACO,KAAK;UACpBC,QAAQ,EAAE,CAAC;UACXC,UAAU,EAAET,OAAO,CAACO,KAAK;UACzBhB,IAAI,EAAES,OAAO,CAACU;QAClB,CAAC,CAAC;MACN,CAAC,MAAM;QACHR,YAAY,CAACM,QAAQ,EAAE;QACvBN,YAAY,CAACO,UAAU,GAAGP,YAAY,CAACO,UAAU,GAAGT,OAAO,CAACO,KAAK;MACrE;MACAT,KAAK,CAACJ,iBAAiB,EAAE;IAE7B,CAAC;IACDiB,UAAU,EAAEA,CAACb,KAAK,EAAEC,MAAM,KAAK;MAC3B,MAAMM,EAAE,GAAGN,MAAM,CAACE,OAAO;MACzB,MAAMC,YAAY,GAAGJ,KAAK,CAACL,KAAK,CAACU,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MAE7D,IAAGH,YAAY,CAACM,QAAQ,KAAK,CAAC,EAAG;QAC7BV,KAAK,CAACL,KAAK,GAAGK,KAAK,CAACL,KAAK,CAACmB,MAAM,CAACR,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MAC5D,CAAC,MAAM;QACHH,YAAY,CAACM,QAAQ,EAAE;QACvBN,YAAY,CAACO,UAAU,GAAIP,YAAY,CAACO,UAAU,GAAGP,YAAY,CAACK,KAAK;MAC3E;MACAT,KAAK,CAACJ,iBAAiB,EAAE;IAE7B,CAAC;IACDmB,WAAWA,CAACf,KAAK,EAAEC,MAAM,EAAE;MACvBD,KAAK,CAACJ,iBAAiB,GAAGK,MAAM,CAACE,OAAO,CAACa,aAAa;MACtDhB,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACE,OAAO,CAACR,KAAK;IACpC;EACN;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAACI,OAAO;EAAEc,UAAU;EAAEE;AAAW,CAAC,GAAGvB,SAAS,CAACyB,OAAO;AACnE;;AAEA,eAAezB,SAAS,CAAC0B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}