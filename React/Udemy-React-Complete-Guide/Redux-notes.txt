Local State :
- state that belongs to a single component (ex: listening to user input in a input field)
- should be managed component-internal with useState() / useReducer()

Cross-Component State:
- State that affects multiuple components (ex: open/close state of a modal overlay)
- require prop chains

Aoo Wide State:
- State that affecets the entire app ( ex: User authentication status )
- require props chains


React Context vs Redux
Redux and React Context are state management systems for cross-component or app-wide state.

React Context disadvantages:
- complex setup/management ( I may end up using a lot of context providers nested )
- performance can be bad ( not optimise for high-frequency state chagnes )


- Components set up subscription to the Central Data Store( State ). 
- Components never manupulate directly the store data. Reducer functions are responsible for mutating/changing the 
state data.
- Components trigger/dispatch actions which describe what should be done, then the actions are forwarded to the reducers.
Next, the reducer give a new state.
- The reducer function always take 2 arguments : the old state( or the current state ) and the dispatched action. Also,
it almost always outputs the new state object.

!! SHOULD NOT MUTATE THE EXISTING STATE, INSTEAD ALWAYS OVERWRITE IT BY RETURNING A BRAND NEW OBJECT !! => because objwects
and arrays are are reference values in JS. So for example in the reducer it will work if I will do state.counter++ but
it is not correct and I should just return a new object like return { counter: state.counter++}.

Reducers must be pure, sde-effet free, synchronous functions

Input (old state + action) => Output ( new state )

So the side-effects and async tasks can be executed inside the COMPONENTS ( with useEffect ) and inside the ACTION CREATORS.